{"version":3,"sources":["redux/modules/markdownSlice.js","components/Editor.js","components/Previewer.js","components/Header.js","App.js","serviceWorker.js","redux/confugureStore.js","index.js"],"names":["markdownSlice","createSlice","name","initialState","text","reducers","convertMarkdown","state","action","marked","payload","sanitize","headerIds","actions","getText","setText","markdown","Editor","dispatch","useDispatch","initMarkdownText","useState","useEffect","className","id","value","onChange","e","target","resize","Previewer","useSelector","dangerouslySetInnerHTML","__html","Header","App","script","document","createElement","src","body","appendChild","async","removeChild","Boolean","window","location","hostname","match","configureStore","reducer","markdownReducer","ReactDOM","render","StrictMode","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTAGaA,EAAgBC,YAAY,CACvCC,KAAM,WACNC,aAAc,CACZC,KAAM,IAERC,SAAU,CACRC,gBAAiB,SAACC,EAAOC,GACvBD,EAAMH,KAAOK,IAAOD,EAAOE,QAAS,CAAEC,UAAU,EAAMC,WAAW,Q,EAK3BZ,EAAca,QAA3CP,E,EAAAA,gBAEFQ,G,EAFmBC,QAET,SAACR,GAAD,OAAWA,EAAMS,SAASZ,OAElCJ,IAAf,QCgBeiB,EA9BA,WACb,IAAMC,EAAWC,cAEXC,EACJ,6tCAJiB,EAMKC,mBAASD,GANd,mBAMZhB,EANY,KAMNW,EANM,KAiBnB,OAJAO,qBAAU,WACRJ,EAASZ,EAAgBc,MACxB,CAACF,IAGF,yBAAKK,UAAU,iCACb,8BACEC,GAAG,SACHC,MAAOrB,EACPsB,SAdc,SAACC,GACnBZ,EAAQY,EAAEC,OAAOH,OACjBP,EAASZ,EAAgBqB,EAAEC,OAAOH,SAa9BI,OAAO,IACPN,UAAU,mFCVHO,EAdG,WAChB,IAAM1B,EAAO2B,YAAYjB,GAEzB,OACE,yBAAKS,UAAU,2DACb,yBACEC,GAAG,UACHD,UAAU,qGACVS,wBAAyB,CAAEC,OAAQ7B,OCD5B8B,EATA,WACb,OACE,yBAAKX,UAAU,sDACb,yBAAKA,UAAU,UAAf,SACA,yBAAKA,UAAU,UAAf,aCuBSY,MAvBf,WAYE,OAXAb,qBAAU,WACR,IAAMc,EAASC,SAASC,cAAc,UAKtC,OAJAF,EAAOG,IACL,kEACFF,SAASG,KAAKC,YAAYL,GAC1BA,EAAOM,OAAQ,EACR,WACLL,SAASG,KAAKG,YAAYP,MAE3B,IAGD,yBAAKb,UAAU,uDACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,8BACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCZYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCfSC,kBAAe,CAC5BC,QAAS,CACPlC,SAAUmC,KCGdC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJlB,SAASmB,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3c326613.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport marked from \"marked\";\r\n\r\nexport const markdownSlice = createSlice({\r\n  name: \"markdown\",\r\n  initialState: {\r\n    text: \"\",\r\n  },\r\n  reducers: {\r\n    convertMarkdown: (state, action) => {\r\n      state.text = marked(action.payload, { sanitize: true, headerIds: false });\r\n    },\r\n  },\r\n});\r\n\r\nexport const { convertMarkdown, setText } = markdownSlice.actions;\r\n\r\nexport const getText = (state) => state.markdown.text;\r\n\r\nexport default markdownSlice.reducer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"../tailwind.output.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { convertMarkdown } from \"../redux/modules/markdownSlice\";\r\n\r\nconst Editor = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const initMarkdownText =\r\n    \"# Welcome to my React Markdown Previewer!\\r\\n\\r\\n## This is a sub-heading...\\r\\n### And here's some other cool stuff:\\r\\n\\r\\nHeres some code, `<div></div>`, between 2 backticks.\\r\\n\\r\\n```\\r\\n// this is multi-line code:\\r\\n\\r\\nfunction anotherExample(firstLine, lastLine) {\\r\\n  if (firstLine == '```' && lastLine == '```') {\\r\\n    return multiLineCode;\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nYou can also make text **bold**... whoa!\\r\\nOr _italic_.\\r\\nOr... wait for it... **_both!_**\\r\\nAnd feel free to go crazy ~~crossing stuff out~~.\\r\\n\\r\\nThere's also [links](https://www.freecodecamp.com), and\\r\\n> Block Quotes!\\r\\n\\r\\nAnd if you want to get really crazy, even tables:\\r\\n\\r\\nWild Header | Crazy Header | Another Header?\\r\\n------------ | ------------- | -------------\\r\\nYour content can | be here, and it | can be here....\\r\\nAnd here. | Okay. | I think we get it.\\r\\n\\r\\n- And of course there are lists.\\r\\n  - Some are bulleted.\\r\\n     - With different indentation levels.\\r\\n        - That look like this.\\r\\n\\r\\n\\r\\n1. And there are numbered lists too.\\r\\n1. Use just 1s if you want!\\r\\n1. And last but not least, let's not forget embedded images:\\r\\n\\r\\n![React Logo w/ Text](https://miro.medium.com/max/256/1*gGh9I9ju9w4lXhmWoG2fXA.png)\";\r\n\r\n  const [text, setText] = useState(initMarkdownText);\r\n\r\n  const handleInput = (e) => {\r\n    setText(e.target.value);\r\n    dispatch(convertMarkdown(e.target.value));\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(convertMarkdown(initMarkdownText));\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"bg-white m-1 mb-3 flex flex-1\">\r\n      <textarea\r\n        id=\"editor\"\r\n        value={text}\r\n        onChange={handleInput}\r\n        resize=\"0\"\r\n        className=\"p-1 w-full flex-1 border-solid border-2 border-gray-600 resize-none bg-white\"\r\n      ></textarea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport \"../tailwind.output.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getText } from \"./../redux/modules/markdownSlice\";\r\n\r\nconst Previewer = () => {\r\n  const text = useSelector(getText);\r\n\r\n  return (\r\n    <div className=\"bg-green-200 m-1 mb-3 flex flex-1 flex-grow-50 max-w-50\">\r\n      <div\r\n        id=\"preview\"\r\n        className=\"p-1 w-full flex-1 border-solid border-2 border-gray-600 bg-white text-left break-words resize-none\"\r\n        dangerouslySetInnerHTML={{ __html: text }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Previewer;\r\n","import React from \"react\";\r\nimport \"../tailwind.output.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"bg-indigo-200 h-10 flex-shrink-0 flex items-center\">\r\n      <div className=\"flex-1\">Input</div>\r\n      <div className=\"flex-1\">Preview</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Editor from \"./components/Editor\";\r\nimport Previewer from \"./components/Previewer\";\r\nimport Header from \"./components/Header\";\r\nimport \"./tailwind.output.css\";\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    const script = document.createElement(\"script\");\r\n    script.src =\r\n      \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\r\n    document.body.appendChild(script);\r\n    script.async = true;\r\n    return () => {\r\n      document.body.removeChild(script);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App h-full min-h-screen bg-indigo-200 flex flex-col\">\r\n      <Header />\r\n      <div className=\"flex flex-1 justify-around\">\r\n        <Editor />\r\n        <Previewer />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport markdownReducer from \"./modules/markdownSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    markdown: markdownReducer,\r\n  },\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./redux/confugureStore\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}